class ScannedReceipt:

    def __init__(self, store_name="", date="", store_address="", total_receipt_price=0, scanned_line_items=None, id=None) -> None:
        self.id = id# generated by mongo
        self.store_name = store_name
        self.date = date
        self.store_address = store_address
        self.total_receipt_price = total_receipt_price
        self.scanned_line_items = scanned_line_items #list of product objects

    def print(self) -> None:
        '''print info stores in model'''
        print("Store Name: ", self.store_name)
        print("Date: ", self.date)
        print("Address: ", self.store_address)
        print("Total Receipt Price: ", self.total_receipt_price)
        print("Scanned Line Items: ")

        for item_number, scanned_line_item in enumerate(self.scanned_line_items):
            print("----------Product ", item_number + 1, "----------")
            scanned_line_item.print()

    def flutter_response(self):
         '''convert model to map for use in jsonify() when getting receipt scan confirmation'''
         return{
            "storeName": self.store_name,
            "storeAddress": self.store_address,
            "date": self.date,
            "totalReceiptPrice": self.total_receipt_price,
            "scannedLineItems": [scanned_line_item.flutter_response() for scanned_line_item in self.scanned_line_items]
        }
    
    def get_mongo_entry(self):
        '''convert model to map for use in mongo'''
        return{
            "storeName": self.store_name,
            "storeAddress": self.store_address,
            "date": self.date, 
            "totalReceiptPrice": self.total_receipt_price, 
            "scannedLineItems": [scanned_line_item.mongo_receipt_entry() for scanned_line_item in self.scanned_line_items]
        }
